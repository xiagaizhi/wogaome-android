apply plugin: 'com.android.application'
android {

    compileSdkVersion gradle.compileSdkVersion
    buildToolsVersion gradle.buildToolsVersion
    defaultConfig {
        applicationId "com.yushi.leke"
        minSdkVersion gradle.minSdkVersion
        targetSdkVersion gradle.targetSdkVersion
        versionCode gradle.versionCode
        versionName gradle.versionName
        aaptOptions.cruncherEnabled = false
        aaptOptions.useNewCruncher = false
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    dexOptions {
        preDexLibraries = false
        javaMaxHeapSize "2048M"
        jumboMode = true
    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }

    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    sourceSets {

        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    signingConfigs {
        release {
            storeFile file('leke.keystore')
            storePassword 'yushikeji'
            keyAlias 'leke'
            keyPassword 'yushikeji'

        }
    }

    packagingOptions {
        packagingOptions { exclude 'META-INF/rxjava.properties' }
    }

    buildTypes {
        release {
            //manifestPlaceholders = [IS_DEBUG: 'false']
            minifyEnabled false
            proguardFile file('proguard.cfg')
            signingConfig signingConfigs.release
            shrinkResources false    // 开启去除无用资源
            debuggable false

        }
        debug {
            // 更改需调整debug/res/values/strings.xml其中的包名部分
            proguardFile 'Unrecognized value'
            signingConfig signingConfigs.release
            debuggable true
            minifyEnabled false
            shrinkResources false
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            def versionName = variant.versionName
            def newName = ""
            if (variant.productFlavors.size() != 0) {
                def flavor = variant.productFlavors.get(0)
                newName = "leke-" + versionName + "-" + flavor.name + ".apk"
            } else {
                newName = "leke.apk"
            }
            outputFileName =newName
        }
    }
}


dependencies {
    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.squareup.leakcanary:leakcanary-android:1.5'
    implementation 'com.google.android.gms:play-services-cast-framework:11.0.1'
    implementation 'com.android.support:mediarouter-v7:'+ gradle.supportLibraryVersion
    implementation 'com.google.android.exoplayer:exoplayer:r2.5.0'
    implementation project(':aliplayer')
    implementation project(':library')
//    // 插件配置信息,放在文件最下面
//    virtualApk {
//        // 插件资源表中的packageId，需要确保不同插件有不同的packageId.
//        packageId = 0x6f
//        // 宿主工程application模块的路径，插件的构建需要依赖这个路径,我这个宿主工程和插件工程在同一级目录下,所以下面这样写
//        targetHost = '../android-leke-host/app'
//
//        //默认为true，如果插件有引用宿主的类，那么这个选项可以使得插件和宿主保持混淆一致
//        //applyHostMapping = true
//    }
    implementation project(':musicplayer')
}
